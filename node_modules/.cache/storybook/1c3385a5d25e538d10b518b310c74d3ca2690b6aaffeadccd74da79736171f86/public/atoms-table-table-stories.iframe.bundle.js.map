{"version":3,"file":"atoms-table-table-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;;AAIA;AAEA;AAIA;AAAA;AAAA;;AAEA;AAEA;AAKA;AACA;AACA;;AAGA;AAEA;AAKA;AACA;AAIA;;AAGA;AAEA;AAKA;AACA;AAIA;;AAGA;AAEA;AAKA;AACA;AAIA;;AAGA;AAEA;AAKA;AACA;AAIA;;AAGA;AAEA;AAKA;AACA;AACA;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GA;AACA;AAEA;AACA;AACA","sources":["webpack://zendesign/./src/stories/atoms/table/table.stories.tsx","webpack://zendesign/./src/components/ui/table.tsx","webpack://zendesign/./src/lib/utils.ts"],"sourcesContent":["import React from \"react\";\r\nimport type { Meta, StoryObj } from \"@storybook/react\";\r\nimport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableRow,\r\n  TableHead,\r\n  TableCell,\r\n  TableCaption,\r\n  TableFooter,\r\n} from \"@/components/ui/table\";\r\n\r\nconst meta: Meta<typeof Table> = {\r\n  title: \"Atoms/Table\",\r\n  component: Table,\r\n  tags: [\"autodocs\"],\r\n  parameters: {\r\n    layout: \"centered\",\r\n  },\r\n};\r\n\r\nexport default meta;\r\ntype Story = StoryObj<typeof Table>;\r\n\r\nexport const Default: Story = {\r\n  render: () => (\r\n    <Table>\r\n      <TableCaption>Table Caption will goes here</TableCaption>\r\n      <TableHeader>\r\n        <TableRow>\r\n          <TableHead>Name</TableHead>\r\n          <TableHead>Email</TableHead>\r\n          <TableHead>Role</TableHead>\r\n        </TableRow>\r\n      </TableHeader>\r\n      <TableBody>\r\n        <TableRow>\r\n          <TableCell>John Doe</TableCell>\r\n          <TableCell>john@doe.com</TableCell>\r\n          <TableCell>Admin</TableCell>\r\n        </TableRow>\r\n      </TableBody>\r\n      <TableFooter>Table Footer will goes here</TableFooter>\r\n    </Table>\r\n  ),\r\n};\r\n","import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Table = React.forwardRef<\r\n  HTMLTableElement,\r\n  React.HTMLAttributes<HTMLTableElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"relative w-full overflow-auto\">\r\n    <table\r\n      ref={ref}\r\n      className={cn(\"w-full caption-bottom text-sm\", className)}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nTable.displayName = \"Table\"\r\n\r\nconst TableHeader = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\r\n))\r\nTableHeader.displayName = \"TableHeader\"\r\n\r\nconst TableBody = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tbody\r\n    ref={ref}\r\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableBody.displayName = \"TableBody\"\r\n\r\nconst TableFooter = React.forwardRef<\r\n  HTMLTableSectionElement,\r\n  React.HTMLAttributes<HTMLTableSectionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tfoot\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableFooter.displayName = \"TableFooter\"\r\n\r\nconst TableRow = React.forwardRef<\r\n  HTMLTableRowElement,\r\n  React.HTMLAttributes<HTMLTableRowElement>\r\n>(({ className, ...props }, ref) => (\r\n  <tr\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableRow.displayName = \"TableRow\"\r\n\r\nconst TableHead = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.ThHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <th\r\n    ref={ref}\r\n    className={cn(\r\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableHead.displayName = \"TableHead\"\r\n\r\nconst TableCell = React.forwardRef<\r\n  HTMLTableCellElement,\r\n  React.TdHTMLAttributes<HTMLTableCellElement>\r\n>(({ className, ...props }, ref) => (\r\n  <td\r\n    ref={ref}\r\n    className={cn(\r\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableCell.displayName = \"TableCell\"\r\n\r\nconst TableCaption = React.forwardRef<\r\n  HTMLTableCaptionElement,\r\n  React.HTMLAttributes<HTMLTableCaptionElement>\r\n>(({ className, ...props }, ref) => (\r\n  <caption\r\n    ref={ref}\r\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCaption.displayName = \"TableCaption\"\r\n\r\nexport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableFooter,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableCaption,\r\n}\r\n","import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"],"names":[],"sourceRoot":""}