{"version":3,"file":"atoms-accordion-accordion-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAKA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;;AAGA;AAEA;AAIA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAIA;AAEA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AAEA;AACA;AACA","sources":["webpack://zendesign/./src/stories/atoms/accordion/accordion.stories.tsx","webpack://zendesign/./src/components/atoms/accordion.tsx","webpack://zendesign/./src/lib/utils.ts"],"sourcesContent":["import { Meta } from \"@storybook/react\";\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/atoms/accordion\";\r\n\r\nconst meta: Meta<typeof Accordion> = {\r\n  title: \"Atoms/Accordion\",\r\n  component: Accordion,\r\n  tags: [\"autodocs\"],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        component:\r\n          \"The Accordion component allows users to toggle the visibility of content sections. It supports single or multiple item expansion and can be customized with various props.\",\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n    type: {\r\n      control: \"select\",\r\n      options: [\"single\", \"multiple\"],\r\n      description: \"Choose the type of accordion behavior.\",\r\n    },\r\n    className: {\r\n      control: \"text\", // Control for custom CSS class\r\n    },\r\n    collapsible: {\r\n      control: \"boolean\",\r\n    },\r\n    disabled: {\r\n      control: \"boolean\",\r\n    },\r\n    defaultValue: {\r\n      control: \"select\",\r\n      options: [\"item-1\", \"item-2\", undefined], // Options for defaultValue\r\n    },\r\n  },\r\n};\r\n\r\nexport default meta;\r\n\r\nconst Template: React.FC<React.ComponentProps<typeof Accordion>> = (args) => {\r\n  return (\r\n    <Accordion {...args}>\r\n      <AccordionItem value=\"item-1\">\r\n        <AccordionTrigger>Item 1</AccordionTrigger>\r\n        <AccordionContent>Content for item 1.</AccordionContent>\r\n      </AccordionItem>\r\n      <AccordionItem value=\"item-2\">\r\n        <AccordionTrigger>Item 2</AccordionTrigger>\r\n        <AccordionContent>Content for item 2.</AccordionContent>\r\n      </AccordionItem>\r\n    </Accordion>\r\n  );\r\n};\r\n\r\n// Default story with controls\r\nexport const Default = (args: React.ComponentProps<typeof Accordion>) => (\r\n  <Template {...args} />\r\n);\r\nDefault.args = {\r\n  className: \"AccordionRoot\",\r\n  type: \"single\", // Default type\r\n  defaultValue: undefined,\r\n  collapsible: true,\r\n  disabled: false,\r\n};\r\n","\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\"\r\n\r\nconst Accordion = AccordionPrimitive.Root\r\n\r\nconst AccordionItem = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\r\n>(({ className, ...props }, ref) => (\r\n  <AccordionPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\"border-b\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAccordionItem.displayName = \"AccordionItem\"\r\n\r\nconst AccordionTrigger = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <AccordionPrimitive.Header className=\"flex\">\r\n    <AccordionPrimitive.Trigger\r\n      ref={ref}\r\n      className={cn(\r\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <ChevronDownIcon className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\r\n    </AccordionPrimitive.Trigger>\r\n  </AccordionPrimitive.Header>\r\n))\r\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\r\n\r\nconst AccordionContent = React.forwardRef<\r\n  React.ElementRef<typeof AccordionPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\r\n>(({ className, children, ...props }, ref) => (\r\n  <AccordionPrimitive.Content\r\n    ref={ref}\r\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\r\n    {...props}\r\n  >\r\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\r\n  </AccordionPrimitive.Content>\r\n))\r\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\r\n\r\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\r\n","import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"],"names":[],"sourceRoot":""}