{"version":3,"file":"atoms-checkbox-checkbox-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAAA;;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AAEA;AACA;AACA","sources":["webpack://zendesign/./src/stories/atoms/checkbox/checkbox.stories.tsx","webpack://zendesign/./src/components/atoms/checkbox.tsx","webpack://zendesign/./src/lib/utils.ts"],"sourcesContent":["import { Meta, StoryObj } from \"@storybook/react\";\r\nimport { Checkbox } from \"@/components/atoms/checkbox\";\r\n\r\nconst meta: Meta<typeof Checkbox> = {\r\n  title: \"Atoms/Checkbox\",\r\n  component: Checkbox,\r\n  tags: [\"autodocs\"],\r\n  parameters: {\r\n    docs: {\r\n      description: {\r\n        story: \"A control that allows the user to toggle between checked and not checked.\"\r\n      },\r\n    },\r\n  },\r\n  argTypes: {\r\n   disabled: {\r\n    control: 'boolean',\r\n   }\r\n  },\r\n};\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<typeof Checkbox>;\r\n\r\nconst RenderCheckbox = (args: object) => (\r\n    <div className=\"items-top flex space-x-2\">\r\n    <Checkbox id=\"terms1\" {...args} />\r\n    <div className=\"grid gap-1.5 leading-none\">\r\n      <label\r\n        htmlFor=\"terms1\"\r\n        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n      >\r\n        Accept terms and conditions\r\n      </label>\r\n      <p className=\"text-sm text-muted-foreground\">\r\n        You agree to our Terms of Service and Privacy Policy.\r\n      </p>\r\n    </div>\r\n  </div>\r\n  );\r\n\r\nexport const Default: Story = {\r\n  render: RenderCheckbox,\r\n};\r\n ","\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\r\nimport { Check } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Checkbox = React.forwardRef<\r\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\r\n>(({ className, disabled=false, ...props }, ref) => (\r\n  <CheckboxPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\r\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\r\n      className\r\n    )}\r\n    disabled={disabled}\r\n    {...props}\r\n  >\r\n    <CheckboxPrimitive.Indicator\r\n      className={cn(\"flex items-center justify-center text-current\")}\r\n    >\r\n      <Check className=\"h-4 w-4\" />\r\n    </CheckboxPrimitive.Indicator>\r\n  </CheckboxPrimitive.Root>\r\n))\r\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\r\n\r\nexport { Checkbox }\r\n","import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"],"names":[],"sourceRoot":""}