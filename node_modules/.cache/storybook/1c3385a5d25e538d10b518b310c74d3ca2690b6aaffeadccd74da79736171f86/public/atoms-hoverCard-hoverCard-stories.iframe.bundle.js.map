{"version":3,"file":"atoms-hoverCard-hoverCard-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAOA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AAIA;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AAEA;AACA;AACA","sources":["webpack://zendesign/./src/stories/atoms/hoverCard/hoverCard.stories.tsx","webpack://zendesign/./src/components/atoms/hoverCard.tsx","webpack://zendesign/./src/lib/utils.ts"],"sourcesContent":["import type { Meta, StoryObj } from \"@storybook/react\"\r\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \"@/components/atoms/hoverCard\"\r\n\r\nconst meta: Meta<typeof HoverCard> = {\r\n  title: \"Atoms/HoverCard\",\r\n  component: HoverCard,\r\n  tags: [\"autodocs\"],\r\n}\r\n\r\nexport default meta\r\ntype Story = StoryObj<typeof HoverCard>\r\n\r\n// Template for reusability\r\nconst HoverCardTemplate: Story = {\r\n  render: () => (\r\n    <HoverCard>\r\n      <HoverCardTrigger asChild>\r\n        <span className=\"cursor-pointer underline decoration-dotted\">\r\n          Hover over me\r\n        </span>\r\n      </HoverCardTrigger>\r\n      <HoverCardContent>\r\n        <div className=\"space-y-2\">\r\n          <h4 className=\"text-sm font-semibold\">@username</h4>\r\n          <p className=\"text-sm\">\r\n            This is an example hover card content. You can put any content here.\r\n          </p>\r\n        </div>\r\n      </HoverCardContent>\r\n    </HoverCard>\r\n  ),\r\n}\r\n\r\n// Stories\r\nexport const Default: Story = {\r\n  ...HoverCardTemplate,\r\n}\r\n\r\n\r\n","\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst HoverCard = HoverCardPrimitive.Root\r\n\r\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\r\n\r\nconst HoverCardContent = React.forwardRef<\r\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\r\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\r\n  <HoverCardPrimitive.Content\r\n    ref={ref}\r\n    align={align}\r\n    sideOffset={sideOffset}\r\n    className={cn(\r\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\r\n\r\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\r\n","import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"],"names":[],"sourceRoot":""}